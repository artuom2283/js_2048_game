{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable prettier/prettier */ \"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState ? JSON.parse(JSON.stringify(initialState)) : Array(4).fill(null).map(()=>Array(4).fill(0));\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n        if (!initialState) {\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        this.board = this.board.map((row)=>this.slideAndMerge(row));\n        this.finalizeMove();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        this.board = this.board.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.slideAndMerge(row.reverse()).reverse());\n        this.finalizeMove();\n    }\n    moveUp() {\n        this.transpose();\n        this.board = this.board.map((row)=>this.slideAndMerge(row));\n        this.transpose();\n        this.finalizeMove();\n    }\n    moveDown() {\n        this.transpose();\n        this.board = this.board.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.slideAndMerge(row.reverse()).reverse());\n        this.transpose();\n        this.finalizeMove();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return JSON.parse(JSON.stringify(this.board));\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.status === \"win\") return \"win\";\n        if (this.noMovesLeft()) return \"lose\";\n        return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateBoard();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n        this.updateBoard();\n    }\n    // Add your own methods here\n    updateBoard() {\n        const fieldCells = document.querySelectorAll(\".field-cell\");\n        fieldCells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = this.board[row][col];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n        });\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((value, colIndex)=>{\n                if (value === 0) emptyCells.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    slideAndMerge(row) {\n        const nonZero = row.filter((value)=>value !== 0);\n        const merged = [];\n        let i = 0;\n        while(i < nonZero.length)if (nonZero[i] === nonZero[i + 1]) {\n            merged.push(nonZero[i] * 2);\n            this.score += nonZero[i] * 2;\n            i += 2;\n        } else {\n            merged.push(nonZero[i]);\n            i++;\n        }\n        while(merged.length < 4)merged.push(0);\n        return merged;\n    }\n    transpose() {\n        const newBoard = Array(4).fill(null).map(()=>Array(4).fill(0));\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)newBoard[j][i] = this.board[i][j];\n        this.board = newBoard;\n    }\n    finalizeMove() {\n        const previousState = JSON.stringify(this.board);\n        this.addRandomTile();\n        this.updateBoard();\n        if (this.board.flat().includes(2048)) this.status = \"win\";\n        else if (this.noMovesLeft() && JSON.stringify(this.board) === previousState) this.status = \"lose\";\n    }\n    noMovesLeft() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$updateUI() {\n    $09e991522ca7e64e$var$game.updateBoard();\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    const key = e.key;\n    if ([\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ].includes(key)) {\n        switch(key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateUI();\n    }\n});\n\n\n//# sourceMappingURL=index.4d2ae9b2.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction updateUI() {\n  game.updateBoard();\n\n  scoreElement.textContent = game.getScore();\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    startButton.textContent = 'Restart';\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    startButton.textContent = 'Restart';\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  game.restart();\n  game.start();\n\n  updateUI();\n\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n\n  messageStart.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const key = e.key;\n\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(key)) {\n    switch (key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    updateUI();\n  }\n});\n","/* eslint-disable prettier/prettier */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState\n      ? JSON.parse(JSON.stringify(initialState))\n      : Array(4)\n        .fill(null)\n        .map(() => Array(4).fill(0));\n\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n\n    if (!initialState) {\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.board = this.board.map((row) => this.slideAndMerge(row));\n    this.finalizeMove();\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.board = this.board.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.slideAndMerge(row.reverse()).reverse());\n\n    this.finalizeMove();\n  }\n\n  moveUp() {\n    this.transpose();\n    this.board = this.board.map((row) => this.slideAndMerge(row));\n    this.transpose();\n    this.finalizeMove();\n  }\n\n  moveDown() {\n    this.transpose();\n\n    this.board = this.board.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.slideAndMerge(row.reverse()).reverse());\n    this.transpose();\n    this.finalizeMove();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return JSON.parse(JSON.stringify(this.board));\n  }\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'win') {\n      return 'win';\n    }\n\n    if (this.noMovesLeft()) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n    this.updateBoard();\n  }\n\n  // Add your own methods here\n  updateBoard() {\n    const fieldCells = document.querySelectorAll('.field-cell');\n\n    fieldCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.board[row][col];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    });\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slideAndMerge(row) {\n    const nonZero = row.filter((value) => value !== 0);\n    const merged = [];\n    let i = 0;\n\n    while (i < nonZero.length) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        merged.push(nonZero[i] * 2);\n        this.score += nonZero[i] * 2;\n        i += 2;\n      } else {\n        merged.push(nonZero[i]);\n        i++;\n      }\n    }\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  transpose() {\n    const newBoard = Array(4)\n      .fill(null)\n      .map(() => Array(4).fill(0));\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        newBoard[j][i] = this.board[i][j];\n      }\n    }\n\n    this.board = newBoard;\n  }\n\n  finalizeMove() {\n    const previousState = JSON.stringify(this.board);\n\n    this.addRandomTile();\n    this.updateBoard();\n\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (\n      this.noMovesLeft() &&\n      JSON.stringify(this.board) === previousState\n    ) {\n      this.status = 'lose';\n    }\n  }\n\n  noMovesLeft() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","JSON","parse","stringify","Array","fill","map","board","score","status","addRandomTile","moveLeft","row","slideAndMerge","finalizeMove","moveRight","reverse","moveUp","transpose","moveDown","getScore","getState","getStatus","noMovesLeft","start","updateBoard","restart","fieldCells","document","querySelectorAll","forEach","cell","index","Math","floor","value","textContent","className","emptyCells","rowIndex","colIndex","push","col","length","randomCell","random","nonZero","filter","merged","i","newBoard","j","previousState","flat","includes","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$updateUI","classList","remove","add","addEventListener","e","key"],"version":3,"file":"index.4d2ae9b2.js.map"}